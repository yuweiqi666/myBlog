(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{497:function(r,v,t){"use strict";t.r(v);var o=t(1),e=Object(o.a)({},(function(){var r=this,v=r._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[v("h2",{attrs:{id:"背景"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#背景"}},[r._v("#")]),r._v(" 背景")]),r._v(" "),v("p",[r._v("源于在一次工作中后端小伙伴进行接口改造，询问删除某个接口字段是够对前端目前生产环境代码产生影响。排查完后前端代码发现该字段用于某个页面的数据遍历展示中")]),r._v(" "),v("blockquote",[v("p",[r._v("假设 这个排查字段为"),v("code",[r._v("proList")]),r._v(" ，代码如图。不难发现这是一段简单的vue代码 v-for循环渲染")])]),r._v(" "),v("img",{attrs:{src:"/myBlog/imgs/v-for1.png"}}),r._v(" "),v("h2",{attrs:{id:"思考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#思考"}},[r._v("#")]),r._v(" 思考")]),r._v(" "),v("p",[r._v("我本能的以为如果后端"),v("code",[r._v("proList")]),r._v("字段删除 ，那么"),v("code",[r._v("v-for")]),r._v("遍历"),v("code",[r._v("undefined")]),r._v("前端代码就会报错。于是 我本地mock数据 将会接口返回的"),v("code",[r._v("proList")]),r._v("写成固定值"),v("code",[r._v("undefined")]),r._v("，尽然神奇的发现代码根本不会报错，v-for区域也完美的不渲染，于是我决定去看vue源码查看v-for指令官方是如何封装的")]),r._v(" "),v("h2",{attrs:{id:"v-for-源码解释"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#v-for-源码解释"}},[r._v("#")]),r._v(" v-for 源码解释")]),r._v(" "),v("img",{attrs:{src:"/myBlog/imgs/v-for2.png"}}),r._v(" "),v("img",{attrs:{src:"/myBlog/imgs/v-for3.png"}}),r._v(" "),v("ul",[v("li",[r._v("如图，官方对于v-for的封装思路也很简单  ， 首先判断v-for的值是何种数据类型再做相应的处理，红圈处即为对遍历数据进行null和undefined的判断 ，如果遍历数据为null或者undefined则会赋值为空数组，由此谜题解开，v-for对于null和undefined的遍历不会报错。")])])])}),[],!1,null,null,null);v.default=e.exports}}]);